<?php

class FrmStrpActionsController extends FrmTransActionsController {

	public static function add_hidden_token_field() {
		if ( isset( $_POST['stripeToken'] ) ) {
			// include the token if going between pages
			echo '<input type="hidden" name="stripeToken" value="' . esc_attr( $_POST['stripeToken'] ) . '"/>';
		}
	}

	/**
	 * If the names are being used on the CC fields,
	 * make sure it doesn't prevent the submission if Stripe has approved
	 */
	public static function remove_cc_validation( $errors, $field, $values ) {
		if ( isset( $_POST['stripeToken'] ) ) {
			$field_id = isset( $field->temp_id ) ? $field->temp_id : $field->id;
			if ( isset( $errors[ 'field' . $field_id . '-cc' ] ) ) {
				unset( $errors[ 'field' . $field_id . '-cc' ] );
			}
		}

		return $errors;
	}

	public static function trigger_gateway( $action, $entry, $form ) {
		$response = array( 'success' => false, 'run_triggers' => false, 'show_errors' => true );

		$atts = compact( 'action', 'entry', 'form' );

		$amount = self::prepare_amount( $action->post_content['amount'], $atts );
		if ( empty( $amount ) || $amount == 000 ) {
			$response['error'] = __( 'Please specify an amount for the payment', 'formidable-stripe' );
			return $response;
		}

		// retrieve the token generated by stripe.js
		if ( ! isset( $_POST['stripeToken'] ) ) {
			$response['error'] = __( 'The Stripe Token is missing.', 'formidable-stripe' );
			return $response;
		}

		if ( ! FrmStrpApiHelper::initialize_api() ) {
			$response['error'] = __( 'There was a problem communicating with Stripe. Please try again.', 'formidable-stripe' );
			return $response;
		}

		$customer = self::set_customer_with_token( $atts );
		if ( ! is_object( $customer ) ) {
			$response['error'] = $customer;
			return $response;
		}

		// attempt to charge the customer's card
		if ( 'recurring' == $action->post_content['type'] ) {
			$charge = self::trigger_recurring_payment( compact( 'customer', 'entry', 'action', 'amount' ) );
		} else {
			$charge = self::trigger_one_time_payment( compact( 'customer', 'form', 'entry', 'action', 'amount' ) );
			$response['run_triggers'] = true;
		}

		if ( $charge === true ) {
			$response['success'] = true;
		} else {
			$response['error'] = $charge;
		}

		return $response;
	}

	private static function set_customer_with_token( $atts ) {
		if ( is_object( $_POST['stripeToken'] ) || strpos( $_POST['stripeToken'], ' ' ) ) {
			// it's an object if this isn't the first Stripe action running
			return $_POST['stripeToken'];
		}

		$payment_info = array(
			'source' => sanitize_text_field( $_POST['stripeToken'] ),
			'user_id' => FrmTransAppHelper::get_user_id_for_current_payment(),
		);

		if ( ! empty( $atts['action']->post_content['email'] ) ) {
			$payment_info['email'] = apply_filters( 'frm_content', $atts['action']->post_content['email'], $atts['form'], $atts['entry'] );
			if ( $payment_info['email'] == '[email]' ) {
				$payment_info['email'] = FrmProAppHelper::get_current_user_value( 'user_email' );
			}
		}

		$customer = FrmStrpApiHelper::get_customer( $payment_info );
		$_POST['stripeToken'] = $customer; //set for later use

		return $customer;
	}

	/**
	 * @param array $atts. Includes 'customer', 'entry', 'action', 'amount'
	 * @return bool|string True on success, error message on failure
	 */
	private static function trigger_recurring_payment( $atts ) {
		try {

			$new_charge = array(
				'customer' => $atts['customer']->id,
				'plan'     => self::get_plan_from_atts( $atts ),
			);

			$trial_end = self::get_trial_end_time( $atts );
			if ( ! empty( $trial_end ) ) {
				$new_charge['trial_end'] = $trial_end;
			}

			$charge = \Stripe\Subscription::create( $new_charge );

			$atts['charge'] = $charge;
			$atts['charge']->sub_id = $charge->id;
			$atts['charge']->id     = null;
			$atts['charge']->paid   = 0;
			$atts['charge']->amount = $atts['amount'];

			$atts['charge']->sub_id = self::create_new_subscription( $atts );
			$atts['status'] = 'pending';

			self::adjust_for_free_trial( $atts );

			self::create_new_payment( $atts );

			$success = true;
		} catch ( \Stripe\Error\Base $e ) {
			$success = FrmStrpApiHelper::get_stripe_exception( $e );
		} catch ( Exception $e ) {
			$success = self::get_generic_exception( $e );
		}

		return $success;
	}

	private static function adjust_for_free_trial( &$atts ) {
		$trial_end = self::get_trial_end_time( $atts );
		if ( ! empty( $trial_end ) ) {
			$atts['charge']->amount = 0;
			$atts['charge']->current_period_start = time();
			$atts['charge']->current_period_end   = $trial_end;
		}
	}

	/**
	 * Get the trial period from the settings or from the connected entry
	 *
	 * @since 1.16
	 *
	 * @param array $atts. Includes 'customer', 'entry', 'action', 'amount'
	 *
	 * @return int The timestamp when the trial should end. 0 for no trial
	 */
	private static function get_trial_end_time( $atts ) {
		$settings = $atts['action']->post_content;
		if ( isset( $settings['trial_interval_count'] ) && ! empty( $settings['trial_interval_count'] ) ) {
			$trial = $settings['trial_interval_count'];
			if ( ! is_numeric( $trial ) ) {
				$trial = FrmTransAppHelper::process_shortcodes(
					array(
						'value' => $trial,
						'entry' => $atts['entry'],
					)
				);
			}
			return strtotime( '+' . absint( $trial ) . ' days' );
		} else {
			return 0;
		}
	}

	private static function trigger_one_time_payment( $atts ) {
		try {
			$new_charge = array(
				'customer' => $atts['customer']->id,
				'currency' => $atts['action']->post_content['currency'],
				'amount'   => $atts['amount'],
			);
			if ( ! empty( $atts['action']->post_content['description'] ) ) {
				$new_charge['description'] = $atts['action']->post_content['description'];
			}

			$new_charge = apply_filters( 'frm_strp_new_charge', $new_charge, $atts );
			$charge = \Stripe\Charge::create( $new_charge );

			$atts['status'] = $charge->paid ? 'complete' : 'failed';
			if ( $charge->paid && ! $charge->captured ) {
				$atts['status'] = 'authorized';
			}
			$atts['charge'] = $charge;

			self::create_new_payment( $atts );

			$success = true;
		} catch ( \Stripe\Error\Base $e ) {
			$success = FrmStrpApiHelper::get_stripe_exception( $e );
		} catch ( Exception $e ) {
			$success = self::get_generic_exception( $e );
		}

		return $success;
	}

	private static function get_generic_exception( $e ) {
		FrmTransLog::log_message( $e->getMessage() );
		return $e->getMessage();
	}

	private static function create_new_subscription( $atts ) {
		$atts['charge'] = (object) $atts['charge'];

		$new_values = array(
			'amount'     => number_format( ( $atts['charge']->amount / 100 ), 2, '.', '' ),
			'paysys'     => 'stripe',
			'item_id'    => $atts['entry']->id,
			'action_id'  => $atts['action']->ID,
			'sub_id'     => isset( $atts['charge']->sub_id ) ? $atts['charge']->sub_id : '',
			'interval_count' => $atts['action']->post_content['interval_count'],
			'time_interval'  => $atts['action']->post_content['interval'],
			'status'         => 'active',
			'next_bill_date' => date( 'Y-m-d' ),
		);

		$frm_sub = new FrmTransSubscription();
		$sub_id = $frm_sub->create( $new_values );
		return $sub_id;
	}

	private static function create_new_payment( $atts ) {
		$atts['charge'] = (object) $atts['charge'];

		$new_values = array(
			'amount'     => number_format( ( $atts['charge']->amount / 100 ), 2, '.', '' ),
			'status'     => $atts['status'],
			'paysys'     => 'stripe',
			'item_id'    => $atts['entry']->id,
			'action_id'  => $atts['action']->ID,
			'receipt_id' => $atts['charge']->id,
			'sub_id'     => isset( $atts['charge']->sub_id ) ? $atts['charge']->sub_id : '',
		);

		if ( isset( $atts['charge']->current_period_end ) ) {
			$new_values['begin_date']  = date( 'Y-m-d', $atts['charge']->current_period_start );
			$new_values['expire_date'] = date( 'Y-m-d', $atts['charge']->current_period_end );
		}

		$frm_payment = new FrmTransPayment();
		$payment_id = $frm_payment->create( $new_values );
		return $payment_id;
	}

	/**
	 * Convert the amount from 10.00 to 1000
	 */
	public static function prepare_amount( $amount, $atts = array() ) {
		$amount = parent::prepare_amount( $amount, $atts );
		$currency = self::get_currency_for_action( $atts );

		return number_format( $amount, $currency['decimals'], '', '' );
	}

	public static function add_action_defaults( $defaults ) {
		$defaults['plan_id'] = '';
		return $defaults;
	}

	public static function add_action_options( $atts ) {
		$form_action = $atts['form_action'];
		$action_control = $atts['action_control'];
		include( FrmStrpAppHelper::plugin_path() . '/views/action-settings/options.php' );
	}

	public static function before_save_settings( $settings ) {
		$settings['currency'] = strtolower( $settings['currency'] );
		$settings = self::create_plans( $settings );
		return $settings;
	}

	public static function create_plans( $settings ) {
		if ( $settings['type'] != 'recurring' || strpos( $settings['amount'], ']' ) ) {
			$settings['plan_id'] = '';
			return $settings;
		}

		$plan_opts = self::prepare_plan_options( $settings ) ;
		if ( $plan_opts['id'] != $settings['plan_id'] ) {
			$settings['plan_id'] = self::maybe_create_plan( $plan_opts );
		}

		return $settings;
	}

	private static function prepare_plan_options( $settings ) {
		$amount = self::prepare_amount( $settings['amount'], $settings );
		$default_description = number_format( ( $amount / 100 ), 2 ) . '/' . $settings['interval'];
		$plan_opts = array(
			'amount'   => $amount,
			'interval' => $settings['interval'],
			'interval_count' => $settings['interval_count'],
			'currency' => $settings['currency'],
			'name'     => empty( $settings['description'] ) ? $default_description : $settings['description'],
		);

		if ( $settings['trial_interval_count'] ) {
			$plan_opts['trial_period_days'] = self::get_trial_with_default( $settings['trial_interval_count'] );
		}

		$plan_opts['id'] = self::create_plan_id( $settings );

		return $plan_opts;
	}

	/**
	 * Since the trial period can come from an entry, use a default value
	 * when creating the plan. This is overridden when the subscription
	 * is created.
	 *
	 * @since 1.16
	 */
	private static function get_trial_with_default( $trial ) {
		if ( ! is_numeric( $trial ) ) {
			$trial = 1;
		}
		return absint( $trial );
	}

	private static function get_plan_from_atts( $atts ) {
		$action = $atts['action'];
		$action->post_content['amount'] = $atts['amount'];
		return self::get_plan_for_action( $action );
	}

	private static function get_plan_for_action( $action ) {
		$plan_id = $action->post_content['plan_id'];
		if ( empty( $plan_id ) ) {

			// the amount has already been formatted, so add the decimal back in
			$amount = $action->post_content['amount'];
			$action->post_content['amount'] = number_format( ( $amount / 100 ), 2, '.', '' );

			$plan_opts = self::prepare_plan_options( $action->post_content ) ;
			$plan_id = self::maybe_create_plan( $plan_opts );
		}

		return $plan_id;
	}

	private static function maybe_create_plan( $plan ) {
		FrmStrpApiHelper::initialize_api();

		$existing_plan = self::retrieve_plan( $plan['id'] );
		$plan_id = 0;
		if ( $existing_plan ) {
			$plan_id = $existing_plan['id'];
		} else {
			FrmStrpApiHelper::set_api_version( '2018-01-23' );

			try {
				\Stripe\Plan::create( $plan );
				$plan_id = $plan['id'];
			} catch ( Exception $e ) {
				$error = self::get_generic_exception( $e );
				FrmTransLog::log_message( $error );
			}
		}
		return $plan_id;
	}

	private static function retrieve_plan( $id ) {
		$plan = false;
		if ( ! empty( $id ) ) {
			try {
				$plan = \Stripe\Plan::retrieve( $id );
			} catch ( Exception $e ) {
				// plan doesn't exist
				$error = self::get_generic_exception( $e );
				FrmTransLog::log_message( $error );
			}
		}
		return $plan;
	}

	public static function create_plan_id( $settings ) {
		$amount = self::prepare_amount( $settings['amount'], $settings );
		$id = sanitize_title_with_dashes( $settings['description'] ) . '_' . $amount . '_' . $settings['interval_count'] . $settings['interval'];
		return $id;
	}

	/**
	 * If this form submits with ajax, load the scripts on the first page
	 */
	public static function maybe_load_scripts( $params ) {
		if ( $params['form_id'] == $params['posted_form_id'] ) {
			// this form has already been posted, so we aren't on the first page
			return;
		}

		$form = FrmForm::getOne( $params['form_id'] );
		if ( isset( $form->options['ajax_submit'] ) && $form->options['ajax_submit'] ) {
			$credit_card_field = FrmField::getAll( array( 'fi.form_id' => $form->id, 'type' => 'credit_card' ) );
			if ( $credit_card_field ) {
				self::load_scripts( $params );
			}
		}
	}

	public static function load_scripts( $params ) {
		if ( FrmAppHelper::is_admin_page( 'formidable-entries' ) ) {
			return;
		}

		$settings = new FrmStrpSettings();

		// check to see if we are in test mode
		if ( $settings->settings->test_mode ) {
			$publishable = $settings->settings->test_publish;
		} else {
			$publishable = $settings->settings->live_publish;
		}

		wp_register_script( 'stripe', 'https://js.stripe.com/v2/' );
		wp_enqueue_script( 'formidable-stripe', FrmStrpAppHelper::plugin_url(). '/js/frmstrp.js', array( 'stripe', 'formidable' ) );

		if ( isset( $params['form_id'] ) && $params['form_id'] ) {
			$action_settings = self::prepare_settings_for_js( $params['form_id'] );
		} else {
			$action_settings = array();
		}

		wp_localize_script( 'formidable-stripe', 'frm_stripe_vars', array(
			'publishable_key' => $publishable,
			'form_id'  => $params['form_id'],
			'nonce'    => wp_create_nonce( 'frm_strp_ajax' ),
			'root'     => esc_url_raw( rest_url() ),
			'api_nonce' => wp_create_nonce('wp_rest'),
			'settings' => $action_settings,
		) );
	}
}
